{"version":3,"file":"index.esm.js","sources":["../src/utils/atob.js","../src/lib/data-converter.js","../src/lib/meta-converter.js","../src/lib/meta-reader/jpeg.js","../src/lib/meta-reader/png.js","../src/lib/read-meta.js","../src/utils/btoa.js","../src/lib/meta-writer/jpeg.js","../src/lib/meta-writer/png.js","../src/lib/write-meta.js","../src/index.js"],"sourcesContent":["function main(str) {\n  // eslint-disable-next-line no-undef\n  if (typeof atob === 'function') return atob(str)\n  return Buffer.from(str, 'base64').toString('binary')\n}\n\nmodule.exports = main","const atob = require('../utils/atob')\n\nfunction isDataUrl (data) {\n  return data && data.startsWith && data.startsWith('data:image/')\n}\n\nfunction convertToBuffer(data) {\n  if (!data) return null\n\n  if (typeof data === 'object') {\n    return data\n  } else if (typeof data === 'string') {\n    let base64 = data\n    if (isDataUrl(data)) {\n      base64 = dataUrlToBase64(data)\n    }\n    else if (isBinaryString(data)) {\n      return binaryStringToBuffer(data)\n    }\n    return base64ToBuffer(base64)\n  }\n\n  throw new Error('fail to convert data to buffer')\n}\n\nfunction dataUrlToBase64(dataUrl) {\n  let idx = dataUrl.indexOf('base64')\n  if (idx === -1) {\n    throw new Error('input is not a valid base64 string')\n  }\n  return dataUrl.substr(idx + 7)\n}\n\nfunction base64ToBuffer(base64) {\n  return binaryStringToBuffer(atob(base64))\n}\n\nfunction binaryStringToBuffer (binaryStr) {\n  if (typeof binaryStr !== 'string') throw new Error('input is not a string')\n  // TextEncoder cannot convert binary string\n  // if (typeof TextEncoder === 'function') return (new TextEncoder()).encode(binaryStr)\n  if (typeof Buffer === 'function') return Buffer.from(binaryStr, 'binary')\n  let len = binaryStr.length\n  let bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryStr.charCodeAt(i)\n  }\n  return bytes\n}\n\nfunction convertToBinaryString(data) {\n  if (typeof data === 'object') {\n    if (data.length >= 0) {\n      // TextDecoder cannot convert binary string\n      // if (typeof TextDecoder === 'function') return (new TextDecoder()).decode(data)\n      return Array.prototype.map.call(data, code => String.fromCharCode(code)).join('')\n    }\n  } else if (typeof data === 'string') {\n    if (isDataUrl(data)) {\n      return atob(dataUrlToBase64(data))\n    }\n    return data\n  }\n\n  throw new Error('fail to convert data to binary string')\n}\n\nfunction isBinaryString (data) {\n  return typeof data === 'string' && /[^\\x20-\\x7E\\t\\r\\n]/.test(data)\n}\n\nmodule.exports = {\n  convertToBuffer,\n  dataUrlToBase64,\n  base64ToBuffer,\n  convertToBinaryString,\n}\n","const WORD_SEPARATOR = '~_'\nconst META_SEPARATOR = '_|'\nconst SIG = 'Mt_'\n\nfunction encodeMetadata (metadata) {\n  return metadata.map(meta => {\n    return `${meta.value}`\n  }).join(\"\")\n}\n\nfunction decodeMetadata (string) {\n  if (!string.startsWith(SIG)) return string\n  return string.slice(SIG.length).split(META_SEPARATOR).map(metaStr => {\n    let [name, value] = metaStr.split(WORD_SEPARATOR)\n    return {name: unescape(name), value: unescape(value)}\n  })\n}\n\nmodule.exports = {\n  encodeMetadata,\n  decodeMetadata,\n}","const { load, TAGS } = require('piexifjs')\n\nconst {\n  convertToBinaryString,\n} = require('../data-converter')\nconst { decodeMetadata } = require('../meta-converter')\n\nfunction metaReader (data) {\n  let binaryStr = convertToBinaryString(data)\n  let ret = load(binaryStr)\n  let results = []\n  for (let key in ret) {\n    let obj = ret[key]\n    let dict\n    if (key === '0th') {\n      dict = TAGS.Image\n    } else if (key === 'Exif') {\n      dict = TAGS.Exif\n    } else {\n      dict = TAGS.GPS\n    }\n    for (let id in obj) {\n      let def = dict[id]\n      let name = (def && def.name) || 'unknown'\n      if (name === 'UserComment') {\n        let decoded = decodeMetadata(obj[id])\n        if (Array.isArray(decoded)) {\n          decoded.forEach(meta => results.push(meta))\n          continue\n        }\n      }\n      results.push({\n        name,\n        value: obj[id],\n      })\n    }\n  }\n  return results\n}\n\nmodule.exports = metaReader","const extract = require('png-chunks-extract')\nconst text = require('png-chunk-text')\n\nconst {\n  convertToBuffer,\n} = require('../data-converter')\n\nfunction metaReader(data) {\n  let buffer = convertToBuffer(data)\n  let chunks = extract(buffer)\n  return chunks.filter(function (chunk) {\n    return chunk.name === 'tEXt'\n  }).map(function (chunk) {\n    let ret = text.decode(chunk.data)\n    return {\n      name: unescape(ret.keyword),\n      value: unescape(ret.text)\n    }\n  })\n}\n\nmodule.exports = metaReader","const jpeg = require('./meta-reader/jpeg')\nconst png = require('./meta-reader/png')\n\n/**\n * Read Metadata from image data\n * \n * @param {*} data \n * @param {String} mimeType \n */\nfunction readMeta(data, mimeType) {\n  if (!data || !mimeType) {\n    throw new Error('`readMeta` got invalid arguments')\n  }\n\n  switch (mimeType) {\n  case 'image/jpeg':\n    return jpeg(data)\n  case 'image/png':\n    return png(data)\n  default:\n    throw new Error('unsupported mimeType: ', mimeType)\n  }\n}\n\n\nmodule.exports = readMeta\n","function main(str) {\n  // eslint-disable-next-line no-undef\n  if (typeof btoa === 'function') return btoa(str)\n\n  var buffer\n  if (str instanceof Buffer) {\n    buffer = str\n  } else {\n    buffer = Buffer.from(str.toString(), 'binary')\n  }\n\n  return buffer.toString('base64')\n}\n\nmodule.exports = main","const { load, ExifIFD, dump, insert } = require('piexifjs')\n\nconst btoa = require('../../utils/btoa')\nconst {\n  convertToBuffer,\n  convertToBinaryString,\n} = require('../data-converter')\nconst { encodeMetadata } = require('../meta-converter')\n\nfunction metaWriter (data, metaData, outputFormat = 'buffer') {\n  let binaryStr = convertToBinaryString(data)\n  let ret = load(binaryStr)\n  let zeroth = ret['0th'] || {}\n  let GPS = ret.GPS || {}\n  let Exif = Object.assign({}, ret.Exif, {\n    [ExifIFD.UserComment]: encodeMetadata(metaData)\n  })\n  ret = {'0th': zeroth, Exif, GPS}\n  let exifStr = dump(ret)\n  binaryStr = insert(exifStr, binaryStr)\n\n  if (outputFormat === 'binaryString') return binaryStr\n  if (outputFormat === 'base64') return btoa(binaryStr)\n  if (outputFormat === 'dataUrl') return `data:image/jpeg;base64,${btoa(binaryStr)}`\n  if (outputFormat === 'buffer') return convertToBuffer(binaryStr)\n}\n\nmodule.exports = metaWriter","const extract = require('png-chunks-extract')\nconst text = require('png-chunk-text')\nconst encode = require('png-chunks-encode')\n\nconst btoa = require('../../utils/btoa')\nconst {\n  convertToBuffer,\n  convertToBinaryString,\n} = require('../data-converter')\n\nfunction metaWriter (data, metaData, outputFormat = 'buffer') {\n  let buffer = convertToBuffer(data)\n  let chunks = extract(buffer)\n\n  // remove all duplicated meta first\n  for (let i = chunks.length - 1; i >= 0; i--) {\n    const chunk = chunks[i]\n    if (chunk.name !== 'tEXt') {\n      continue\n    }\n    let ret = text.decode(chunk.data)\n\n    for (let j = 0; j < metaData.length; j++) {\n      const meta = metaData[j]\n      if (meta.name === ret.keyword && meta.value === ret.text) {\n        chunks.splice(i, 1)\n        break\n      }\n    }\n  }\n\n  // insert meta\n  for (let i = 0; i < metaData.length; i++) {\n    let meta = metaData[i]\n    \n    let value = meta.value\n    if (value.length === 0) {\n      value = 'null'\n    }\n    chunks.splice(-1, 0, text.encode(meta.name, value))\n  }\n\n  let arrayBuffer = encode(chunks)\n  if (outputFormat === 'binaryString') return convertToBinaryString(arrayBuffer)\n  if (outputFormat === 'base64') return btoa(convertToBinaryString(arrayBuffer))\n  if (outputFormat === 'dataUrl') return `data:image/png;base64,${btoa(convertToBinaryString(arrayBuffer))}`\n  if (outputFormat === 'buffer') return arrayBuffer\n}\n\nmodule.exports = metaWriter","const jpeg = require('./meta-writer/jpeg')\nconst png = require('./meta-writer/png')\n\n/**\n * Write Metadata into image data\n * \n * @param {*} data \n * @param {String} mimeType \n * @param {Array} metaData\n * @param {String} outputFormat\n *                 options: base64, binaryString, buffer, dataUrl\n */\nfunction writeMeta(data, mimeType, metaData, outputFormat) {\n  if (!data || !mimeType || !metaData || !outputFormat) {\n    throw new Error('`writeMeta` got invalid arguments')\n  }\n\n  switch (mimeType) {\n  case 'image/jpeg':\n    return jpeg(data, metaData, outputFormat)\n  case 'image/png':\n    return png(data, metaData, outputFormat)\n  default:\n    throw new Error('unsupported mimeType: ', mimeType)\n  }\n}\n\nmodule.exports = writeMeta\n","const readMeta = require('./lib/read-meta')\nconst writeMeta = require('./lib/write-meta')\n\nmodule.exports = {\n  readMeta,\n  writeMeta,\n}\n"],"names":["atob","require$$0","convertToBinaryString","require$$1","decodeMetadata","require$$2","convertToBuffer","metaReader","extract","text","main","load","encodeMetadata","btoa","metaWriter","encode","jpeg","png","readMeta","writeMeta"],"mappings":";;;;;AAAA,SAAS,IAAI,CAAC,GAAG,EAAE;;EAEjB,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC;EAChD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;CACrD;;AAED,UAAc,GAAG;;ACJjB,SAAS,SAAS,EAAE,IAAI,EAAE;EACxB,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;CACjE;;AAED,SAAS,eAAe,CAAC,IAAI,EAAE;EAC7B,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI;;EAEtB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,IAAI;GACZ,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IACnC,IAAI,MAAM,GAAG,KAAI;IACjB,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;MACnB,MAAM,GAAG,eAAe,CAAC,IAAI,EAAC;KAC/B;SACI,IAAI,cAAc,CAAC,IAAI,CAAC,EAAE;MAC7B,OAAO,oBAAoB,CAAC,IAAI,CAAC;KAClC;IACD,OAAO,cAAc,CAAC,MAAM,CAAC;GAC9B;;EAED,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;CAClD;;AAED,SAAS,eAAe,CAAC,OAAO,EAAE;EAChC,IAAI,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAC;EACnC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;IACd,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC;GACtD;EACD,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;CAC/B;;AAED,SAAS,cAAc,CAAC,MAAM,EAAE;EAC9B,OAAO,oBAAoB,CAACA,MAAI,CAAC,MAAM,CAAC,CAAC;CAC1C;;AAED,SAAS,oBAAoB,EAAE,SAAS,EAAE;EACxC,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC;;;EAG3E,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC;EACzE,IAAI,GAAG,GAAG,SAAS,CAAC,OAAM;EAC1B,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,GAAG,EAAC;EAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;IAC5B,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,EAAC;GACnC;EACD,OAAO,KAAK;CACb;;AAED,SAAS,qBAAqB,CAAC,IAAI,EAAE;EACnC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IAC5B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;;;MAGpB,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;KAClF;GACF,MAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IACnC,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;MACnB,OAAOA,MAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;KACnC;IACD,OAAO,IAAI;GACZ;;EAED,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC;CACzD;;AAED,SAAS,cAAc,EAAE,IAAI,EAAE;EAC7B,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;CACnE;;AAED,iBAAc,GAAG;EACf,eAAe;EACf,eAAe;EACf,cAAc;EACd,qBAAqB;CACtB;;AC5ED,MAAM,cAAc,GAAG,KAAI;AAC3B,MAAM,cAAc,GAAG,KAAI;AAC3B,MAAM,GAAG,GAAG,MAAK;;AAEjB,SAAS,cAAc,EAAE,QAAQ,EAAE;EACjC,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI;IAC1B,OAAO,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;GACvB,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;CACZ;;AAED,SAAS,cAAc,EAAE,MAAM,EAAE;EAC/B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,OAAO,MAAM;EAC1C,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI;IACnE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,cAAc,EAAC;IACjD,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;GACtD,CAAC;CACH;;AAED,iBAAc,GAAG;EACf,cAAc;EACd,cAAc;;;ACpBhB,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAGC,SAAmB;;AAE1C,MAAM;yBACJC,uBAAqB;CACtB,GAAGC,cAA4B;AAChC,MAAM,kBAAEC,gBAAc,EAAE,GAAGC,cAA4B;;AAEvD,SAAS,UAAU,EAAE,IAAI,EAAE;EACzB,IAAI,SAAS,GAAGH,uBAAqB,CAAC,IAAI,EAAC;EAC3C,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,EAAC;EACzB,IAAI,OAAO,GAAG,GAAE;EAChB,KAAK,IAAI,GAAG,IAAI,GAAG,EAAE;IACnB,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,EAAC;IAClB,IAAI,KAAI;IACR,IAAI,GAAG,KAAK,KAAK,EAAE;MACjB,IAAI,GAAG,IAAI,CAAC,MAAK;KAClB,MAAM,IAAI,GAAG,KAAK,MAAM,EAAE;MACzB,IAAI,GAAG,IAAI,CAAC,KAAI;KACjB,MAAM;MACL,IAAI,GAAG,IAAI,CAAC,IAAG;KAChB;IACD,KAAK,IAAI,EAAE,IAAI,GAAG,EAAE;MAClB,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,EAAC;MAClB,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,KAAK,UAAS;MACzC,IAAI,IAAI,KAAK,aAAa,EAAE;QAC1B,IAAI,OAAO,GAAGE,gBAAc,CAAC,GAAG,CAAC,EAAE,CAAC,EAAC;QACrC,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;UAC1B,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC;UAC3C,QAAQ;SACT;OACF;MACD,OAAO,CAAC,IAAI,CAAC;QACX,IAAI;QACJ,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC;OACf,EAAC;KACH;GACF;EACD,OAAO,OAAO;CACf;;AAED,QAAc,GAAG;;ACrCjB,MAAM;mBACJE,iBAAe;CAChB,GAAGL,cAA4B;;AAEhC,SAASM,YAAU,CAAC,IAAI,EAAE;EACxB,IAAI,MAAM,GAAGD,iBAAe,CAAC,IAAI,EAAC;EAClC,IAAI,MAAM,GAAGE,gBAAO,CAAC,MAAM,EAAC;EAC5B,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE;IACpC,OAAO,KAAK,CAAC,IAAI,KAAK,MAAM;GAC7B,CAAC,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE;IACtB,IAAI,GAAG,GAAGC,YAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAC;IACjC,OAAO;MACL,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC;MAC3B,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC;KAC1B;GACF,CAAC;CACH;;AAED,OAAc,GAAGF;;AClBjB;;;;;;AAMA,SAAS,QAAQ,CAAC,IAAI,EAAE,QAAQ,EAAE;EAChC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;IACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;GACpD;;EAED,QAAQ,QAAQ;EAChB,KAAK,YAAY;IACf,OAAO,IAAI,CAAC,IAAI,CAAC;EACnB,KAAK,WAAW;IACd,OAAO,GAAG,CAAC,IAAI,CAAC;EAClB;IACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,EAAE,QAAQ,CAAC;GACpD;CACF;;;AAGD,cAAc,GAAG,QAAQ;;ACzBzB,SAASG,MAAI,CAAC,GAAG,EAAE;;EAEjB,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC;;EAEhD,IAAI,OAAM;EACV,IAAI,GAAG,YAAY,MAAM,EAAE;IACzB,MAAM,GAAG,IAAG;GACb,MAAM;IACL,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAC;GAC/C;;EAED,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;CACjC;;AAED,UAAc,GAAGA;;ACdjB,MAAM,QAAEC,MAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,GAAGV,SAAmB;;;AAG3D,MAAM;mBACJK,iBAAe;yBACfJ,uBAAqB;CACtB,GAAGC,cAA4B;AAChC,MAAM,kBAAES,gBAAc,EAAE,GAAGP,cAA4B;;AAEvD,SAAS,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,GAAG,QAAQ,EAAE;EAC5D,IAAI,SAAS,GAAGH,uBAAqB,CAAC,IAAI,EAAC;EAC3C,IAAI,GAAG,GAAGS,MAAI,CAAC,SAAS,EAAC;EACzB,IAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,GAAE;EAC7B,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAE;EACvB,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,EAAE;IACrC,CAAC,OAAO,CAAC,WAAW,GAAGC,gBAAc,CAAC,QAAQ,CAAC;GAChD,EAAC;EACF,GAAG,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAC;EAChC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,EAAC;EACvB,SAAS,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,EAAC;;EAEtC,IAAI,YAAY,KAAK,cAAc,EAAE,OAAO,SAAS;EACrD,IAAI,YAAY,KAAK,QAAQ,EAAE,OAAOC,MAAI,CAAC,SAAS,CAAC;EACrD,IAAI,YAAY,KAAK,SAAS,EAAE,OAAO,CAAC,uBAAuB,EAAEA,MAAI,CAAC,SAAS,CAAC,CAAC,CAAC;EAClF,IAAI,YAAY,KAAK,QAAQ,EAAE,OAAOP,iBAAe,CAAC,SAAS,CAAC;CACjE;;AAED,UAAc,GAAG;;ACtBjB,MAAM;mBACJA,iBAAe;yBACfJ,uBAAqB;CACtB,GAAGD,cAA4B;;AAEhC,SAASa,YAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,GAAG,QAAQ,EAAE;EAC5D,IAAI,MAAM,GAAGR,iBAAe,CAAC,IAAI,EAAC;EAClC,IAAI,MAAM,GAAGE,gBAAO,CAAC,MAAM,EAAC;;;EAG5B,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;IAC3C,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,EAAC;IACvB,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,EAAE;MACzB,QAAQ;KACT;IACD,IAAI,GAAG,GAAGC,YAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAC;;IAEjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACxC,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,EAAC;MACxB,IAAI,IAAI,CAAC,IAAI,KAAK,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,EAAE;QACxD,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAC;QACnB,KAAK;OACN;KACF;GACF;;;EAGD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,EAAC;;IAEtB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAK;IACtB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;MACtB,KAAK,GAAG,OAAM;KACf;IACD,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEA,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAC;GACpD;;EAED,IAAI,WAAW,GAAGM,eAAM,CAAC,MAAM,EAAC;EAChC,IAAI,YAAY,KAAK,cAAc,EAAE,OAAOb,uBAAqB,CAAC,WAAW,CAAC;EAC9E,IAAI,YAAY,KAAK,QAAQ,EAAE,OAAOW,MAAI,CAACX,uBAAqB,CAAC,WAAW,CAAC,CAAC;EAC9E,IAAI,YAAY,KAAK,SAAS,EAAE,OAAO,CAAC,sBAAsB,EAAEW,MAAI,CAACX,uBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC1G,IAAI,YAAY,KAAK,QAAQ,EAAE,OAAO,WAAW;CAClD;;AAED,SAAc,GAAGY;;AC9CjB;;;;;;;;;AASA,SAAS,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE;EACzD,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,YAAY,EAAE;IACpD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC;GACrD;;EAED,QAAQ,QAAQ;EAChB,KAAK,YAAY;IACf,OAAOE,MAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC;EAC3C,KAAK,WAAW;IACd,OAAOC,KAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAC;EAC1C;IACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,EAAE,QAAQ,CAAC;GACpD;CACF;;AAED,eAAc,GAAG,SAAS;;ACxB1B,OAAc,GAAG;YACfC,UAAQ;aACRC,WAAS;EACV;;;;;;;"}