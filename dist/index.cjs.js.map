{"version":3,"file":"index.cjs.js","sources":["../src/utils/atob.js","../src/lib/data-converter.js","../src/lib/meta-converter.js","../src/lib/meta-reader/jpeg.js","../src/lib/meta-reader/png.js","../src/lib/read-meta.js","../src/utils/btoa.js","../src/lib/meta-writer/jpeg.js","../src/lib/meta-writer/png.js","../src/lib/write-meta.js","../src/index.js"],"sourcesContent":["function main(str) {\n  // eslint-disable-next-line no-undef\n  if (typeof atob === 'function') return atob(str)\n  return Buffer.from(str, 'base64').toString('binary')\n}\n\nmodule.exports = main","const atob = require('../utils/atob')\n\nfunction isDataUrl (data) {\n  return data && data.startsWith && data.startsWith('data:image/')\n}\n\nfunction convertToBuffer(data) {\n  if (!data) return null\n\n  if (typeof data === 'object') {\n    return data\n  } else if (typeof data === 'string') {\n    let base64 = data\n    if (isDataUrl(data)) {\n      base64 = dataUrlToBase64(data)\n    }\n    else if (isBinaryString(data)) {\n      return binaryStringToBuffer(data)\n    }\n    return base64ToBuffer(base64)\n  }\n\n  throw new Error('fail to convert data to buffer')\n}\n\nfunction dataUrlToBase64(dataUrl) {\n  let idx = dataUrl.indexOf('base64')\n  if (idx === -1) {\n    throw new Error('input is not a valid base64 string')\n  }\n  return dataUrl.substr(idx + 7)\n}\n\nfunction base64ToBuffer(base64) {\n  return binaryStringToBuffer(atob(base64))\n}\n\nfunction binaryStringToBuffer (binaryStr) {\n  if (typeof binaryStr !== 'string') throw new Error('input is not a string')\n  // TextEncoder cannot convert binary string\n  // if (typeof TextEncoder === 'function') return (new TextEncoder()).encode(binaryStr)\n  if (typeof Buffer === 'function') return Buffer.from(binaryStr, 'binary')\n  let len = binaryStr.length\n  let bytes = new Uint8Array(len)\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryStr.charCodeAt(i)\n  }\n  return bytes\n}\n\nfunction convertToBinaryString(data) {\n  if (typeof data === 'object') {\n    if (data.length >= 0) {\n      // TextDecoder cannot convert binary string\n      // if (typeof TextDecoder === 'function') return (new TextDecoder()).decode(data)\n      return Array.prototype.map.call(data, code => String.fromCharCode(code)).join('')\n    }\n  } else if (typeof data === 'string') {\n    if (isDataUrl(data)) {\n      return atob(dataUrlToBase64(data))\n    }\n    return data\n  }\n\n  throw new Error('fail to convert data to binary string')\n}\n\nfunction isBinaryString (data) {\n  return typeof data === 'string' && /[^\\x20-\\x7E\\t\\r\\n]/.test(data)\n}\n\nmodule.exports = {\n  convertToBuffer,\n  dataUrlToBase64,\n  base64ToBuffer,\n  convertToBinaryString,\n}\n","const WORD_SEPARATOR = '~_'\nconst META_SEPARATOR = '_|'\nconst SIG = 'Mt_'\n\nfunction encodeMetadata (metadata) {\n  return metadata.map(meta => {\n    return `${meta.value}`\n  }).join(\"\")\n}\n\nfunction decodeMetadata (string) {\n  if (!string.startsWith(SIG)) return string\n  return string.slice(SIG.length).split(META_SEPARATOR).map(metaStr => {\n    let [name, value] = metaStr.split(WORD_SEPARATOR)\n    return {name: unescape(name), value: unescape(value)}\n  })\n}\n\nmodule.exports = {\n  encodeMetadata,\n  decodeMetadata,\n}","const { load, TAGS } = require('piexifjs')\n\nconst {\n  convertToBinaryString,\n} = require('../data-converter')\nconst { decodeMetadata } = require('../meta-converter')\n\nfunction metaReader (data) {\n  let binaryStr = convertToBinaryString(data)\n  let ret = load(binaryStr)\n  let results = []\n  for (let key in ret) {\n    let obj = ret[key]\n    let dict\n    if (key === '0th') {\n      dict = TAGS.Image\n    } else if (key === 'Exif') {\n      dict = TAGS.Exif\n    } else {\n      dict = TAGS.GPS\n    }\n    for (let id in obj) {\n      let def = dict[id]\n      let name = (def && def.name) || 'unknown'\n      if (name === 'UserComment') {\n        let decoded = decodeMetadata(obj[id])\n        if (Array.isArray(decoded)) {\n          decoded.forEach(meta => results.push(meta))\n          continue\n        }\n      }\n      results.push({\n        name,\n        value: obj[id],\n      })\n    }\n  }\n  return results\n}\n\nmodule.exports = metaReader","const extract = require('png-chunks-extract')\nconst text = require('png-chunk-text')\n\nconst {\n  convertToBuffer,\n} = require('../data-converter')\n\nfunction metaReader(data) {\n  let buffer = convertToBuffer(data)\n  let chunks = extract(buffer)\n  return chunks.filter(function (chunk) {\n    return chunk.name === 'tEXt'\n  }).map(function (chunk) {\n    let ret = text.decode(chunk.data)\n    return {\n      name: unescape(ret.keyword),\n      value: unescape(ret.text)\n    }\n  })\n}\n\nmodule.exports = metaReader","const jpeg = require('./meta-reader/jpeg')\nconst png = require('./meta-reader/png')\n\n/**\n * Read Metadata from image data\n * \n * @param {*} data \n * @param {String} mimeType \n */\nfunction readMeta(data, mimeType) {\n  if (!data || !mimeType) {\n    throw new Error('`readMeta` got invalid arguments')\n  }\n\n  switch (mimeType) {\n  case 'image/jpeg':\n    return jpeg(data)\n  case 'image/png':\n    return png(data)\n  default:\n    throw new Error('unsupported mimeType: ', mimeType)\n  }\n}\n\n\nmodule.exports = readMeta\n","function main(str) {\n  // eslint-disable-next-line no-undef\n  if (typeof btoa === 'function') return btoa(str)\n\n  var buffer\n  if (str instanceof Buffer) {\n    buffer = str\n  } else {\n    buffer = Buffer.from(str.toString(), 'binary')\n  }\n\n  return buffer.toString('base64')\n}\n\nmodule.exports = main","const { load, ExifIFD, dump, insert } = require('piexifjs')\n\nconst btoa = require('../../utils/btoa')\nconst {\n  convertToBuffer,\n  convertToBinaryString,\n} = require('../data-converter')\nconst { encodeMetadata } = require('../meta-converter')\n\nfunction metaWriter (data, metaData, outputFormat = 'buffer') {\n  let binaryStr = convertToBinaryString(data)\n  let ret = load(binaryStr)\n  let zeroth = ret['0th'] || {}\n  let GPS = ret.GPS || {}\n  let Exif = Object.assign({}, ret.Exif, {\n    [ExifIFD.UserComment]: encodeMetadata(metaData)\n  })\n  ret = {'0th': zeroth, Exif, GPS}\n  let exifStr = dump(ret)\n  binaryStr = insert(exifStr, binaryStr)\n\n  if (outputFormat === 'binaryString') return binaryStr\n  if (outputFormat === 'base64') return btoa(binaryStr)\n  if (outputFormat === 'dataUrl') return `data:image/jpeg;base64,${btoa(binaryStr)}`\n  if (outputFormat === 'buffer') return convertToBuffer(binaryStr)\n}\n\nmodule.exports = metaWriter","const extract = require('png-chunks-extract')\nconst text = require('png-chunk-text')\nconst encode = require('png-chunks-encode')\n\nconst btoa = require('../../utils/btoa')\nconst {\n  convertToBuffer,\n  convertToBinaryString,\n} = require('../data-converter')\n\nfunction metaWriter (data, metaData, outputFormat = 'buffer') {\n  let buffer = convertToBuffer(data)\n  let chunks = extract(buffer)\n\n  // remove all duplicated meta first\n  for (let i = chunks.length - 1; i >= 0; i--) {\n    const chunk = chunks[i]\n    if (chunk.name !== 'tEXt') {\n      continue\n    }\n    let ret = text.decode(chunk.data)\n\n    for (let j = 0; j < metaData.length; j++) {\n      const meta = metaData[j]\n      if (meta.name === ret.keyword && meta.value === ret.text) {\n        chunks.splice(i, 1)\n        break\n      }\n    }\n  }\n\n  // insert meta\n  for (let i = 0; i < metaData.length; i++) {\n    let meta = metaData[i]\n    \n    let value = meta.value\n    if (value.length === 0) {\n      value = 'null'\n    }\n    chunks.splice(-1, 0, text.encode(meta.name, value))\n  }\n\n  let arrayBuffer = encode(chunks)\n  if (outputFormat === 'binaryString') return convertToBinaryString(arrayBuffer)\n  if (outputFormat === 'base64') return btoa(convertToBinaryString(arrayBuffer))\n  if (outputFormat === 'dataUrl') return `data:image/png;base64,${btoa(convertToBinaryString(arrayBuffer))}`\n  if (outputFormat === 'buffer') return arrayBuffer\n}\n\nmodule.exports = metaWriter","const jpeg = require('./meta-writer/jpeg')\nconst png = require('./meta-writer/png')\n\n/**\n * Write Metadata into image data\n * \n * @param {*} data \n * @param {String} mimeType \n * @param {Array} metaData\n * @param {String} outputFormat\n *                 options: base64, binaryString, buffer, dataUrl\n */\nfunction writeMeta(data, mimeType, metaData, outputFormat) {\n  if (!data || !mimeType || !metaData || !outputFormat) {\n    throw new Error('`writeMeta` got invalid arguments')\n  }\n\n  switch (mimeType) {\n  case 'image/jpeg':\n    return jpeg(data, metaData, outputFormat)\n  case 'image/png':\n    return png(data, metaData, outputFormat)\n  default:\n    throw new Error('unsupported mimeType: ', mimeType)\n  }\n}\n\nmodule.exports = writeMeta\n","const readMeta = require('./lib/read-meta')\nconst writeMeta = require('./lib/write-meta')\n\nmodule.exports = {\n  readMeta,\n  writeMeta,\n}\n"],"names":["main","str","atob","Buffer","from","toString","isDataUrl","data","startsWith","convertToBuffer","base64","dataUrlToBase64","isBinaryString","binaryStringToBuffer","base64ToBuffer","Error","dataUrl","idx","indexOf","substr","binaryStr","len","length","bytes","Uint8Array","i","charCodeAt","convertToBinaryString","Array","prototype","map","call","code","String","fromCharCode","join","test","WORD_SEPARATOR","META_SEPARATOR","SIG","encodeMetadata","metadata","meta","value","decodeMetadata","string","slice","split","metaStr","name","unescape","load","require$$0","TAGS","require$$1","require$$2","metaReader","ret","results","key","obj","dict","Image","Exif","GPS","id","def","decoded","isArray","forEach","push","buffer","chunks","extract","filter","chunk","text","decode","keyword","readMeta","mimeType","jpeg","png","btoa","ExifIFD","dump","insert","metaWriter","metaData","outputFormat","zeroth","Object","assign","UserComment","exifStr","j","splice","encode","arrayBuffer","writeMeta"],"mappings":"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"}